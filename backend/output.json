[{"Name": "ly \nfunctional requirements", "Email": "Not Provided", "Phone": "Not Provided", "Address": "the economic challenges \nfaced by many users and improve their access to essential items.  \n2. Promote Responsible Consumption : The NEPAGRAM Web Application \nseeks to foster responsible shopping habits among users. By providing a \nconvenient and reliable platform for buying and selling used goods, the \napplication encourages users to consider sustainable options before following    \nnew items, thereby reducing overall consumption and its environmental impact.  \n3. Create a Trusted Marketplace: Building trust and reliability is a key objective \nof the platform. By implementing robust security measures, authenticating \nusers, and facilitating transparent communication between buyers and sellers, \nwe aim to establish a trustworthy environment for all transactions. This fosters \nconfidence in the platform and promotes healthy and ethical interactions.  \n4. Enhance User Experience:  The application aims  to deliver a seamless and \nuser-friendly experience for both buyers and sellers. By utilizing advanced \ntechnologies, such as image -based recommendation powered by machine \nlearning, we strive to offer personalized and accurate item suggestions, ensuring \nan enjoyable shopping journey for users.   \n3  \n\n5. Support Local Economy: Another objective is to support the local economy \nby following   buyers with sellers within Nepal. By encouraging the exchange \nof used goods within the country, the platform contributes to the growth of local \nbusinesses and promotes a sense of community among users.  \n6. Empower Sellers: The application seeks to empower sellers by providing them \nwith a hassle-free platform to reach potential buyers and earn income from their \npre-owned electronics. By  offering a straightforward listing process and \nefficient communication tools, we aim to facilitate successful transactions and \nempower sellers in their online ventures.  \n1.4 Limitations of existing system  \n1. Limited Traffic: The platform's current focus on multi users but there can \nbe traffic incidents if large number of traffic is using the web app. \n2. Limited Return Policy:  The platforms have strict or no return policies, \nwhich means buyers must be cautious and confident in their purchases, as \nreturns or exchanges may not be feasible.  \n3. Quality of Medias: Since users are optimize media quality are also used to \noptimize the web runtime so, it could result the loss of quality in medias. \n4. Communication Challenges:  The platform does not  have messaging \nsystem, which may lead to potential delays in communication between users \n5. Limited Profile Options:  Our Thrift primarily facilitates direct contact \nbetween buyers and sellers, which might limit the availability of secure and \ndiverse Profile options.  \n1.5 Development Meth odology   \n Waterfall model is used for the development of this system and also referred as a linear \nsequential life cycle model. It is very simple to understand and use. In a waterfall model, \neach phase must be completed before the next phase can begin and there is no \noverlapping in the phases. The Waterfall model is the earliest SDLC approach that was \nused for software development. The waterfall Model illustrates the software \ndevelopment process in a linear sequential fl ow. This means that any phase in the \ndevelopment process begins only if the previous phase is complete. In this waterfall  4  \n\nFigure 1 Waterfall Model  \nmodel, the phases do not overlap.  \nThe sequential phases in Waterfall model are as follows:   \n\uf0b7 Requirement Gathering and analysis: All possible requirements of the \nsystem to be developed are captured in this phase and documented in a \nrequirement specification document.   \n\n\uf0b7 System Design: The requirement specifications from first phase are studied in \nthis phase and the system design is prepared. This system design helps in \nspecifying hardware and system requirements and helps in defining the overall \nsystem architecture.   \n\n\uf0b7 Implementation: I nputs from the system design, the system is first developed  \nin small programs called units, which are integrated in the next phase. Each unit \nis developed and tested for its functionality, which is referred to as Unit Testing.   \n\n5  \n\n\uf0b7 Integration and Testing: All the units developed in the implementation phase \nare integrated into a system after testing of each unit. Post integration the entire \nsystem is tested for any faults and failures.   \n\uf0b7 Deployment of system: Once the functional and non-functional testing is done; \nthe users   is deployed in the user   environment or released into the market.   \n\uf0b7 Maintenance: There are some issues which come up in the client environment. \nTo fix those issues, patches are released. Also, to enhance the users   some better \nversions are released. Maintenance is done to deliver these changes i n the user   \nenvironment.   \n1.6 Report Organization   \nThis is the report organization for the house rental system, which also includes \ncharts/diagrams to illustrate the system architecture and design. Furthermore, it \ncontains information regarding the tools and technologies used to build the system.   \n\nTable 1 Outline of the Report  \nIntroduction   Introduction    \nProblem Statement     \nObjective    \nScope and Limitations   \nDevelopment Methodology   \nReport Organization   \nBackground Study    Background Study   \nLiterature Review    \n\nSystem Analysis and Design    \nSystem Analysis   \nFeasibility Analysis   \nSystem Design   6  \n\nImplementation and Testing    Tools and Technology    \nTest Cases   \nConclusion and Recommendations    Lessons Learnt   \nConclusion   \nFuture Recommendations   \n\n7  \n\nChapter 2: Background Study and Literature Review  \n2.1 Background Study  \nThe background study conducted for the \"Nepagram \" social media web app project \nunderscores the need for a culturally tailored platform that connects the Nepalese \ncommunity and enthusiasts. By analyzing market trends, understanding user behaviors, \nand considering ethical and cultural dimensions, \"Nepagra m\" has been crafted to \naddress these needs and offer a unique social media experience.   \nThe proliferation of social media platforms has brought attention to issues related to \ncontent moderation, user privacy, and algorithmic bias. The development of \n\"Nepagram\" has taken these concerns into profile. Robust content moderation tools, \ntransparent privacy settings, and responsibl e algorithmic design have i ntegrated to \nensure a safe and ethical environment for users.  \n2.2 Literature Review  \nThe Django Project do cumentation serves as a comprehensive and authoritative \nresource for developers working with the Django web framework. Django is an open -\nsource, high-level Python web framework designed to encourage rapid development \nand clean, pragmatic design. The docume ntation covers all aspects of Django, from \nsetting up the environment to advanced topics such as database interaction, \nauthentication, security, and deployment. It offers extensive API references, tutorials, \nand guides for both beginner and experienced developers. \nEltantawy and Wiest\u2019s 2011 article, Social Media in the Egyptian Revolution: \nReconsidering Resource Mobilization Theory  explores the role of social media in the \nEgyptian Revolution of 2011, a critical event in the Arab Spring. The authors challenge \ntraditional resource mobilization theory by arguing that social media platforms like \nFacebook and Twitter played a transformat ive role in mobilizing protesters, \ndisseminating information, and shaping the political narrative..   8  \n\nChapter 3: System Analysis and Design  \n3.1 System Analysis  \nThe system analysis of the system is done by conducting requirement \nanalysis, feasibility analysis, object modeling, dynamic modeling and \nprocess modeling as follows:   \n3.1.1 Requirement Analysis  \nThe requirement analysis is broken down into two parts, namely \nfunctional requirements, and non-functional requirements. Both of \nthese are discussed below:  \n 3.1.1.1 Functional Requirement  \n\nFigure 2 Use case diagram  \n\n9  \n\nTable 2 UC-001 Login  \nUse Case ID   UC-001   \nUse Case   \nName   \nLogin   \nActors   User, Admin   \nBrief   \nDescription   \nThis use case describes how a user logs into the NEPAGRAM. The actors \nstarting this use case are User and Admin. The system asks user to input \nusername and password. If the system approves the login, the users are \nallowed to perform required actions.   \nTriggers   The user   wants to login in the system from one of his/her profile.   \nPreconditions   The system is operational.   \nThe user has a profile in the system.   \nThe user is trying to log in with their valid username and password.   \nThe user is not already logged in into the system.   \nNormal Flow   1. The use case begins when the user   accesses the system.   \n2. The system prompts the user for their profile credentials.   \n3. The user enters their username and password.   \n4. The system verifies the user credentials and grants the entry to the \nsystem.   \n5. The user gains access to the systems functionality.   \n6. Use case ends successfully.   \nAlternate   \nFlows   \n 4A1. Invalid username or password.   \n 4A2. User   is request to re -enter the username and password.   \nKey Scenarios   A. Success Scenarios   \n1. Valid username and password   \n2. Access to the system   \nB. Failure Scenarios   \n1. Fail due to authentication failure   \n2. Fail due to invalid username and password   10  \n\n  3. Fail due to inadequate critical resources   \n4. Fail due to non-responding system   \nPost conditions   A. Successful Completions   \n1. The user has logged into the system successfully.   \n2. The user accesses the system functionality.   \nB. Failure Conditions   \n1. The user has not been logged into the system.   \nSpecial   \nRequirement   \n1. The user shall be a registered user to get log into the system.   \n2. The system shall keep the track of the users who accessed the \nsystem.   \n\nTable 3 UC-002 Make Profile  \nUse Case ID   UC-002   \nUse Case   \nName   \nMake Profile    \nActors   User  \nBrief   \nDescription   \nAllows any registered user to make Profile for following    users   of the \nchoice. If the user is not registered then at  first user should register then \nthey can follow. The user   should provide all the profile related \ninformation. User can make Profiles   only after providing valid profile \ndetails.   \nTriggers   The user   wants to make the posts and follow other from one  of his/her \nprofile.   \nPreconditions   The system is operational.   \nThe user has registered and logged into the system.   \nThe user has valid profile details.    \n11  \n\nNormal Flow   1. The use case begins when the user enters into the system to make \nprofiles.   \n2. The system provides login option to user.   \n3. A user enters his/her username and password.   \n4. The system verifies the user\u2019s entered username and password against \nthe registered information.   \n5. User enters the profile details.   \n6. User makes profile.   \n7. The use case ends successfully.   \nAlternate   \nFlows   \n4A1. Invalid username or password.   \n4A2. User is request to re -enter the username and password.   \n7A1. User enters invalid Profile details.   \nKey   \nScenarios   \nA. Success Scenarios   \n1. The profile is made.   \n2. User views profile success information.   \nB. Failure Scenarios   \n1. Fail due to authentication failure   \n2. Fail due to invalid username and password   \n3. Fail due to inadequate critical resources   \n4. Fail due to non-responding system   \n5. Fail due to insufficient details   \n\nPost conditions  A. Successful Completions   \n1. Enters into the system.   \n2. The user makes the profile successfully.   \n3. The user receives the profile confirmation.   \nB. Failure Conditions   \n1. The Profile detail entered by the user   is invalid.   \n2. The Profile system might not be working at that moment.   12  \n\n3.1.1.2 Non-Functional Requirements   \nThe non-functional requirements of NEPAGRAM are as follows:   \nPerformance Requirement:   \ni. The user shall be able to login into the system.   \nUsability Requirement:   \ni. The user shall be able to use the system in easy manner.   \nAvailability Requirement:   \ni. The system is available 100% for the user and is used 24hrs a day and 365 \ndays a year.   \nii. The system shall be operational 24hrs a day and 7 days a week.   \nEnvironmental Requirement:   \ni. The system shall have web browser to run successfully.   \nCompatibility Requirement:   \ni. The system shall be compatible across all platforms under required \nenvironment.   \n\nSecurity Requirement:   \ni.  The user password shall be in encrypted format in the database.   \n\n13  \n\n3.1.2 Feasibility Analysis  \nFeasibility study includes consideration of all the possible ways to provide a solution \nto the given problem. The proposed solution should satisfy all the user requirements \nand should be flexible enough so that future changes can be easily done based on the \nfuture upcoming requirements.   \n3.1.2.1 Technical Feasibility    \nThe technical feasibility of \"Nepagram\" is rooted in the selection of the Django \nframework, which aligns with the project's requirements. The development team \npossesses the necessary skills  to effectively utilize Django, ensuring the creation of a \nrobust and scalable platform. Furthermore, the integration of modern frontend \ntechnologies guarantees a responsive and user-friendly interface across devices.  \n3.1.2.2 Operational Feasibility   \nOperational feasibility is demonstrated by the alignment of \"Nepagram\" with the target \naudience's preferences and behaviors. Extensive user surveys and analysis have \nindicated a demand for a culturally tailored platform like \"Nepagram.\" The inclusion \nof community-based interactions, real -time engagement tools, and personalized content \nrecommendations enhances the platform's operational viability  \n3.1.2.2 Economic Feasibility   \nEconomic feasibility is evidenced by a cost -benefit analysis of the project. Whil e \ndevelopment and maintenance costs are necessary, the potential for user engagement \nand growth within the Nepalese community offers significant revenue opportunities \nthrough targeted advertising, premium features, and potential partnerships. The \nanticipated return on investment justifies the economic feasibility of \"Nepagram.  \n3.1.2.3 Legal Feasibility  \nLegal and ethical considerations have been integrated into the project's design. Content \nmoderation tools, transparent privacy settings, and responsible algorithmic design \nensure compliance with relevant regulations and ethical standards. This approach 14  \n\nenhances the platform's credibility and user trust, demonstrating its legal and ethical \nfeasibility  \n3.1.2.4 Schedule Feasibility  \nSchedule feasibility is the degree to which a deadline for a strategy, plan, project \nor process is realistic and achievable. The feasibility of this project is high as the \nsystem can be completed within the time limit.    \n\nThe above Gantt chart shows the schedule for the project. We can see that the first \n18days were dedicated to requirement collection. The completion of requirement \ncollection allowed the project to move to System Design which then took 15days. \nThen the project moved on to Coding. We coded for 23days and then started the \nimplementation which took 15days. Then the project moved to testing phase which \ntook 12days then finally we documented the project for 10 days.    \n\n15  \n\n3.1.3 Class Diagram  \nThe class diagram for NEPAGRAM is shown as follows:   \n\nFigure 3 Class diagram  \n\n16  \n\n3.1.4 Sequence Diagram  \n\nFigure 4 Sequence diagram  \n\n17  \n\n3.1.5 Activity Diagram  \n\nFigure 5 Activity diagram  \n\n18  \n\n3.2.1 Interface design  \nThe interface design for all the major pages of NEPAGRAM is shown as follows: \n3.2.3.1 Home page UI  \n\nFigure 6 Homepage UI  \n3.2.3.2 Login page UI  \n\n  Figure 7 Login page UI  \n\n19  \n\n3.2.3.2 User profile page UI  \n\n3.2.2 Algorithm details  \nThe detail information about the algorithms that has been used in this system are as \nfollow:   \n\u2022 Image Processing Algorithm: Process images and changes them as the user \nlikes to filter with saturation, contrasts, highlighting, sharpening images and \nmore using open CV. \nCartoonize: \n\n20  \n\nGreyScale: \n\nSaturation: \n\nSharpness: \n\n\uf0b7 SVD Algorithm : \nSingular Value Decomposition (SVD)  is a powerful matrix factorization \ntechnique used in various applications, including dimensionality reduction, \nrecommendation systems, image compression, and more. In essence, SVD \ndecomposes a matrix into three other matrices that capture the underlying \nstructure of the data. Here is a breakdown of the algorithm: \n\n21  \n\nGiven a matrix AAA of size m\u00d7nm \\times nm\u00d7n, the SVD decomposition expresses \nAAA as: \nA=U\u03a3VTA = U \\Sigma V^TA=U\u03a3VT \nWhere: \n\uf0b7 UUU is an m\u00d7mm \\times mm\u00d7m orthogonal matrix, whose columns are the \nleft singular vectors. \n\uf0b7 \u03a3\\Sigma\u03a3 is an m\u00d7nm \\times nm\u00d7n diagonal matrix, with non -negative \nsingular values on the diagonal, sorted in descending order. \n\uf0b7 VVV is an n\u00d7nn \\times nn\u00d7n orthogonal matrix, whose columns are the \nright singular vectors. \n\nApplications of SVD \nHere are some common applications of SVD: \n3.1 Dimensionality Reduction \nThe SVD can be used to reduce the dimensionality of data while preserving as much \ninformation as possible. By selecting the top kkk singular values and corresponding vectors, \nwe obtain a reduced rank approximation of the matrix AAA. \n3.2 Recommender Systems \nIn recommendation systems, SVD is used for matrix factorization to identify latent factors \nthat explain user -item interactions. The matrix AAA represents the user -item interaction \nmatrix, and SVD helps to reduce the noise and find patterns in the data. \n3.3 Image Compression \nImages can be represented as matrices of pixel intensities. SVD can compress images by \napproximating the original matrix with fewer singular values, reducing the  image size \nwithout significantly compromising quality. \n\n 22  \n\nChapter 4: Implementation and Testing  \n 4.1 Implementation   \nThe tools and techniques used to implement the system and the implementation details \nof various modules NEPAGRAM are as follows:   \n4.1.1 Tools Used   \nThe tools used for the implementation of NEPAGRAM are listed below:   \nDraw.io   \nIt was used for designing the system designs such as system flowchart, ER diagram, \nrelational model, architectural design, use case diagram etc.   \nBalsamiq   \nIt was used for designing the user interface of the system.   \nHTML, CSS and JavaScript was used for the front-end development. HTML was used \nfor the webpage elements. CSS was used for providing own styling to the components. \nJavaScript was used for client-side validations and adding dynamic components to the \nwebsite.  \nTailwind \nTailwind was used for adding responsive components in our system as well as other \ntailwind components were used such as buttons, cards, navbar etc.  \nDjango   \nDjango is a high-level Python web framework that enables rapid development of secure \nand maintainable websites.   \nSQLite   \nSQLite is an in -process library that implements a self -contained, serverless, zero \nconfiguration, and transactional SQL database engi ne. The code for SQLite is in the \npublic domain and is thus free for use for any purpose, commercial or private.   \nVisual Studio Code   \nThe codes of the system were written using VS Code.    \n23  \n\n4.2 Testing   \nThe testing of NEPAGRAM is done by testing the unit modules like login module and \nsign-up module.     \n4.2.1 Test Cases for Unit Testing   \nThe test cases for the login module and sign-up module are as follows:     \nTable 4 Test Case for Login  \n  Project Name: NEPAGRAM     \nTest Case    \nTest Case ID: TC_001   Test Designed by: Babim  \nKhanal  \nTest Priority (Low/Medium/High): Medium    Test Designed date: 2024 -07- \n28   \nModule Name: Login Screen    Test Executed by: Babim \nKhanal  \nTest Title:  Verify login with valid username and \npassword   \nTest Execution date: 2024 - \n07-28  \n  Description:  Test the login page   \n  Pre-conditions:  User has valid username and password   \n  Dependencies:    \nStep   Test Steps   Test Data   Expected   \nResult   \nActual  \nResult   \nStatus (Pass/Fail)   Notes  \n1   Navigate to \nlogin page   \n   Login page \nshould open  \nAs  \n Expected   \ni.e.   \nUser is \nnavigated to  \nLogin page \nof system   \nPass      24  \n\n2   Provide \nvalid \nusername   \nUser Name  \n=  bobby   \nCredential \ncan be \nentered   \nAs  \nExpected,   \nPass      \n3   Provide \nvalid \npassword   \nPassword = \nbobby   \n Credential \ncan be \nentered   \nAs  \nExpected,   \nPass      \n4   Click on  \nLOGIN \nbutton   \n   User should \nbe able to  \nlogin to an \napplication  \nAs  \nExpected   \n   i.e.   \n\n User is \nable to log \nin to the \nsystem   \nPass      \nPost-conditions:   \nUser is validated with database and successfully login to NEPAGRAM.   \nThe profile session details are logged in to the database.   \n\n25  \n\nTable 5 Test Case for Sign up  \n  Project Name: NEPAGRAM    \nTest Case    \nTest Case ID: TC_002   Test Designed by: Babim  \nKhanal  \nTest Priority (Low/Medium/High): Medium    Test Designed date: 2024 - \n07-28   \nModule Name: Sign Up Screen    Test Executed by: Babim  \nKhanal  \nTest Title:  Register new user   into the system    Test Execution date: 2024- \n07-28  \n  Description:  Test the HRS sign up page.    \n  Pre-conditions:  User has all the necessary details.   \n  Dependencies:    \nStep   Test Steps   Test Data   Expected   \nResult   \nActual   \nResult   \nStatus \n(Pass/Fail) \nNotes  \n\n1   Navigate to sign up \npage   \n   Sign up page \nshould open   \nAs Expected   \ni.e.   \n User is \nnavigated to   \nSign Up page of \nsystem   \nPass      \n2   Provide all required \ninformation   \nUser Name = \nbobby  \nPassword =  \nbobby  \nEmail= \nbobby@gmai  \nl.com   \nFirst Name =  \nBobby  \n\nCredential \ncan be \nentered  \nAs Expected,  \n\nPass      26  \n\n  Last Name = \nKhanal  \n\n3   Click on  \nSIGNUP button   \n   User should \nbe able to   \nsign up to the \nsystem   \nAs Expected   \ni.e.   \nUser is able to \nregistered to the \nsystem   \n   Pass      \nPost-conditions:   \nUser credentials are validated and successfully registered to NEPAGRAM.   \n\n27  \n\nChapter 5: Conclusion and Future Recommendations  \n5.1 Conclusion  \nThe development journey of the \"Nepagram \" social media web app has been an \nexploration of cultural affinity, user engagement, and technological innovation. \nThrough thorough research, strategic planning, and collaborative effort, we have \nconceptualized and created a platform that seeks to bridge gaps within the Nepalese \ncommunity and provide a unique online space for sharing, connecting, and interacting.  \nThe platform's architecture and design have been carefully crafted to encompass the \nessence of community, personalization, and real -time engagement. By utilizing the \nDjango framework and modern frontend technologies, we have constructed a \nfoundation that is both robust and user -friendly, facilitating seamless interactions and \ndynamic content sharing.  \n5.2 Lesson Learnt/Outcome  \nThroughout the deve lopment of \"Nepagram,\" we learned the significance of ongoing \nuser engagement. Regular feedback loops, user testing, and surveys allowed us to \nunderstand user preferences and incorporate necessary adjustments. This approach \nresulted in features that truly resonate with the target audience, enhancing the overall \nuser experience. Our commitment to user privacy and data security was a key outcome. \nWe learned that embedding robust security measures from the outset is crucial. By \nprioritizing features such as tr ansparent privacy settings, secure authentication, and \ncontent moderation tools, we established a foundation of trust and integrity. Working \nwith the Django framework and modern frontend technologies underscored the \npracticality of utilizing established fr ameworks. These tools provided a solid \nfoundation, allowing us to focus more on innovative features and user experience while \nbenefiting from the frameworks' security and scalability.  \n\n  28  \n\n5.3 Future Recommendation  \nThe development of \"Nepagram\" has provided valuable insights into its potential for \ngrowth and enhancement. As we move forward, we offer the following \nrecommendations to further enrich the platform and its impact:  \n- Enhanced User Engagement Features: Continued innovation in user \nengagement features, such as gamification elements, interactive polls, and \ncollaborative projects, can further elevate user participation and interaction \nwithin the platform  \n\n- Localization and Multilingual Support: To expand its global reach, \nimplementing loca lization features and providing multilingual support can \ncreate an inclusive environment for users from diverse linguistic backgrounds.  \n\n- Augmented Reality (AR) Integration: The integration of augmented reality \nfeatures can offer unique and immersive expe riences for users, enabling them \nto interact with content in novel ways and fostering creativity.   \n\n- Offline and Low -Bandwidth Mode: Introducing an offline mode or a \nlowbandwidth mode can cater to users in areas with limited internet \nconnectivity, allowing them to engage with the platform even under challenging \nnetwork conditions  \n\n29  \n\nReference  \n\n[1] \u201cDjango,\u201d Django Project, https://docs.djangoproject.com/en/4.2/ (accessed Jan. \n20, 2023).   \n[2] \u201cPython 3.11.4 documentation,\u201d 3.11.4 Documentation, https://docs.python.org/3/ \n(accessed Jan. 29, 2023).   \n[3] Eltantawy, N & Wiest, JB 2011, \u2018Social Media in the Egyptian Revolution: \nReconsidering Resource Mobilization Theory\u2019, International Journal of \nCommunication 5, pp. 1207-1224.  \n\nAppendices  \n\nLogin & Signup:  \n\nGoogle AUTH:  \n\nFeed: \n\nUser Profile:  \n\nShare Post: \n\nMarketplace:", "Education": "Faculty of Humanities and Social Sciences  \n\nNEPAGRAM \u2013 SOCIAL MEDIA WEB APP \nIMAGE PROCESSINGG AND SVD ALGORITHM  \nA FINAL YEAR PROJECT REPORT \n\nSubmitted to  \nDepartment of Humanities and Social Science  \nOrchid International College   \nIn partial fulfillment of the requirements for the Bachelors in Computer Application.  \n\nSubmitted by  \nBabim Khanal  \n93902034 \n\nUnder the Supervision of  \nAbhisek Uprety  \nii  \n\nTribhuvan University  \nFaculty of Humanities and Social Sciences  \nOrchid International College  \n\nSUPERVISOR\u2019S RECOMMENDATION  \n\nI hereby recommend that this project be prepared under my supervision by BABIM \nKHANAL entitled \u201cNEPAGRAM \u2013 SOCIAL MEDIA WEB APP WITH IMAGE \nPROCESSING AND SVD ALGORITHM\u201d in partial fulfillment of the requirements \nfor the degree of Bachelor of Computer Application is recommended for the final \nevaluation.  \n\nSUPERVISOR  \nAbhisek Uprety  \nLecturer \nDepartment of IT  \nOrchid International College  \nBijaychowk, Gaushala  \niii  \n\nTribhuvan University  \nFaculty of Humanities and Social Sciences  \nOrchid International College  \nLETTER OF APPROVAL  \nThis is to certify that thi s project was prepared by BABIM KHANAL entitled \n\u201cNEPAGRAM \u2013 SOCIAL MEDIA WEB APP WITH IMAGE PROCESSING \nAND SVD ALGORITHM\u201d in partial fulfillment of the requirements for the degree of \nBachelor in Computer Application has been evaluated. In our opinion, it is satisfactory \nin the scope and quality as a project for the required degree.  \n\nSignature of Supervisor   \n\n----------------------------------------- \nAbhisek Uprety,  Lecturer  \nOrchid International College   \nBijaychowk, Gaushala   \nSignature of Internal Examiner   \n\n----------------------------------------------- \nEr. Dhiraj Kumar Jha,  Head of Department   \nDepartment of IT   \nOrchid International College   \nBijaychowk, Gaushala   \n\nSignature of External Examiner \n\n------------------------------------------------------------ \n\niv  \n\n ABSTRACT  \n\u201cNEPAGRAM \u201c is a dynamic and feature-rich social media web application designed \nto foster connections and interactions among users in the context of Nepalese culture \nand interests . Built on the Django Framework, Nepagram provides a user -friendly \nplatform where individuals can share their experiences, engage with content, and \nparticipate in vibrant online communities.   \nNepagram offers a seamless onboarding experience with user registration, profile \ncreation, and secure authentication. Users can customize their profiles by adding profile \npictures, bios, and other personal details.  \nThe application includes a sophisticated content feed that employs an algorithmic \napproach to display relevant posts to users. Users can create posts enriched with text, \nimages, and videos, and can interact with posts through likes, comments, and shares.  \nNepagram enables users to create and join various interest -based communities, \nreflecting diverse aspects of culture, such as art, food, travel, and more. Community \nmembers can engage in discussions, share experiences, and contribute to the growth of \nthe community.  \n\n v  \n\nACKNOWLEGEMENT  \nWe would like to express our sincere gratitude to all individuals who contributed to the \ndevelopment and realization of the \"Nepagram \" social media web app. Their \ndedication, insights, and support have played an instrumental role in shaping this \nplatform into what it is today. Our gratitude extends to our mentors and advisors who \nprovided guidance and constructive feedback throughout the development lifecycle.  \nTheir insights have enriched the project and guided us in making informed decisions.  \nThe inspiration behind \"Nepagram\" stems from the vibrant Nepalese culture and its \ndiverse community. We acknowledge and celebrate the culture th at guided us in \ncreating a platform that resonates with shared interests and experiences.  \n\nTable of Content  \nSUPERVISOR\u2019S RECOMMENDATION ................................ ................................ ...........  ii \nLETTER OF APPROVAL  ................................ ................................ ................................  iii \nABSTRACT ................................ ................................ ................................ ....................  iv \nACKNOWLEGEMENT ................................ ................................ ................................ ....v \nList of Table ................................ ................................ ................................ ..................... 8 \nList of Figures ................................ ................................ ................................ ................... 9 \nList of Abbreviations  ................................ ................................ ................................ .......  10 \nChapter 1: Introduction ................................ ................................ ................................ ...1 \n1.1 Introduction ................................ ................................ ................................ ............. 1 \n1.2 Problem Statement  ................................ ................................ ................................ ...2 \n1.3 Objectives................................ ................................ ................................ ................ 2 \n1.4 Limitations of existing system  ................................ ................................ ................... 3 \n1.5 Development Methodology  ................................ ................................ ....................... 3 \n1.6 Report Organization  ................................ ................................ ................................ ..... 5 \nChapter 2:Background Study and Literature Review ................................ ...................... 7 \n2.1 Background Study  ................................ ................................ ................................ ....7 \n2.2 Literature Review  ................................ ................................ ................................ ..... 7 \nChapter 3: System Analysis and Design  ................................ ................................ ........... 8 \n3.1 System Analysis ................................ ................................ ................................ ....... 8 \n3.1.1 Requirement Analysis  ................................ ................................ ............................ 8 \n3.1.1.1 Functional Requirement  ................................ ................................ .................. 8 \n3.1.1.2 Non-Functional Requirements ................................ ................................ ........  12 \n3.1.2 Feasibility Analysis  ................................ ................................ .............................  13 \n3.1.2.1 Technical Feasibility  ................................ ................................ .....................  13 \n3.1.2.2 Operational Feasibility  ................................ ................................ ..................  13 \n3.1.2.2 Economic Feasibility  ................................ ................................ .....................  13 \n3.1.2.3 Legal Feasibility  ................................ ................................ ...........................  13 \n3.1.3 Class Diagram  ................................ ................................ ................................ . 15 \n3.1.4 Sequence Diagram  ................................ ................................ ...........................  16  \n3.1.5 Activity Diagram  ................................ ................................ .............................  17 \n3.2.1 Interface design  ................................ ................................ ...............................  18 \n3.2.2 Algorithm detai ls ................................ ................................ .............................  19 \nChapter 4: Implementation and Testing  ................................ ................................ ........  22 \n4.1 Implementation  ................................ ................................ ................................ ......  22 \n4.1.1 Tools Used ................................ ................................ ................................ ......  22 \n4.2 Testing ................................ ................................ ................................ ..................  23 \n4.2.1 Test Cases for Unit Testing  ................................ ................................ ..............  23 \nChapter 5: Conclusion and Future Recommendations ................................ ...................  27 \n5.1 Conclusion................................ ................................ ................................ .............  27 \n5.2 Lesson Learnt/Outcome  ................................ ................................ ..........................  27 \n5.3 Future Recommendation  ................................ ................................ .........................  28 \n\nList of Table  \nTable 1 Outline of the Report ........................................................................................ 5  \nTable 2 UC-001 Login ................................................................................................... 9  \nTable 3 UC-002 Make Posts ........................................................................................ 10  \nTable 4 Test Case for Login......................................................................................... 21  \nTable 5 Test Case For Sign up ..................................................................................... 23  \n\nList of Figures  \nFigure 1 Waterfall Model............................................................................................... 4  \nFigure 2 Use case diagram ............................................................................................. 8  \nFigure 3 Class diagram ................................................................................................ 15  \nFigure 4 Sequence diagram .......................................................................................... 16  \nFigure 5 Activity diagram............................................................................................ 17  \nFigure 6 Homepage UI ................................................................................................. 18  \nFigure 7 Login page UI ................................................................................................ 18  \n\nList of Abbreviations  \nDOM \u2013 Domain Object Model   \nUC \u2013 Use Case   \nUI \u2013 User Interface   \nVS \u2013 Visual Studio  \nCSS \u2013 Cascading style sheet  \nHTML \u2013 Hyper Text Markup Language  \nSQL \u2013 Structured Query Language  \n\n1  \n\nChapter 1: Introduction  \n1.1 Introduction  \nNepagram is upgraded and offers a seamless onboarding experience with user \nregistration, profile creation, and secure authentication. Users can customize their \nprofiles by adding profile pictures, bios, and other personal details. Built on the Django \nframework, Nepagram provides a user -friendly platform where individuals can share \ntheir experiences, engage with content, and participate in vibrant online communities.  \nTechnology Stack:  \nFrontend: The frontend is d eveloped using HTML, Tailwind CSS, and JavaScript. \nTailwind CSS's utility -first approach facilitates rapid development, resulting in a \nresponsive and visually appealing user interface.  \nBackend: Django, a powerful Python web framework, forms the core of ou r \napplication's backend. Django enables seamless data handling, efficient business logic, \nand scalable architecture.  \n- Django Rest Framework: An extension of Django that simplifies building \nRESTful APIs for the frontend to interact with the backend.  \n- Python: The primary programming language for backend development, \nintegrated with Django.  \nDatabase:  \nPostgreSQL: An open -source relational database management system known for its \nperformance, reliability, and support for complex data relationships.  \nAuthentication and Security:  \nOAUTH2.0: For secure user authentication and authorization, allowing users to log in \nusing their existing social media accounts.  \n\n 2  \n\n1.2 Problem Statement   \nIn Nepal, many individuals struggle to find affordable home goods and electronics, such \nas laptops, due to the high cost of living and low income. This economic challenge \nhinders access to new items, and the absence of reliable platforms for selling used goods \ncontributes to significant waste as people often discard their el ectronics instead of \nselling or recycling them.  \nBoth buyers and sellers face obstacles in acquiring or selling used electronics, requiring \na simple and trustworthy solution. There is a pressing need for a platform that can \nfacilitate secure and effective connections between buyers and sellers of pre -owned \nelectronics, promoting sustainable shopping habits and reducing electronic waste.   \n1.3 Objectives  \n1. Facilitate Affordable Access: The primary objective of the NEPAGRAM Web \nApplication is to provide a plat form where individuals in Nepal can access \naffordable home goods and electronics, such as laptops. By offering pre-owned \nitems at reasonable prices, the platform aims to address the economic challenges \nfaced by many users and improve their access to essential items.  \n2. Promote Responsible Consumption : The NEPAGRAM Web Application \nseeks to foster responsible shopping habits among users. By providing a \nconvenient and reliable platform for buying and selling used goods, the \napplication encourages users to consider sustainable options before following    \nnew items, thereby reducing overall consumption and its environmental impact.  \n3. Create a Trusted Marketplace: Building trust and reliability is a key objective \nof the platform. By implementing robust security measures, authenticating \nusers, and facilitating transparent communication between buyers and sellers, \nwe aim to establish a trustworthy environment for all transactions. This fosters \nconfidence in the platform and promotes healthy and ethical interactions.  \n4. Enhance User Experience:  The application aims  to deliver a seamless and \nuser-friendly experience for both buyers and sellers. By utilizing advanced \ntechnologies, such as image -based recommendation powered by machine \nlearning, we strive to offer personalized and accurate item suggestions, ensuring \nan enjoyable shopping journey for users.   \n3  \n\n5. Support Local Economy: Another objective is to support the local economy \nby following   buyers with sellers within Nepal. By encouraging the exchange \nof used goods within the country, the platform contributes to the growth of local \nbusinesses and promotes a sense of community among users.  \n6. Empower Sellers: The application seeks to empower sellers by providing them \nwith a hassle-free platform to reach potential buyers and earn income from their \npre-owned electronics. By  offering a straightforward listing process and \nefficient communication tools, we aim to facilitate successful transactions and \nempower sellers in their online ventures.  \n1.4 Limitations of existing system  \n1. Limited Traffic: The platform's current focus on multi users but there can \nbe traffic incidents if large number of traffic is using the web app. \n2. Limited Return Policy:  The platforms have strict or no return policies, \nwhich means buyers must be cautious and confident in their purchases, as \nreturns or exchanges may not be feasible.  \n3. Quality of Medias: Since users are optimize media quality are also used to \noptimize the web runtime so, it could result the loss of quality in medias. \n4. Communication Challenges:  The platform does not  have messaging \nsystem, which may lead to potential delays in communication between users \n5. Limited Profile Options:  Our Thrift primarily facilitates direct contact \nbetween buyers and sellers, which might limit the availability of secure and \ndiverse Profile options.  \n1.5 Development Meth odology   \n Waterfall model is used for the development of this system and also referred as a linear \nsequential life cycle model. It is very simple to understand and use. In a waterfall model, \neach phase must be completed before the next phase can begin and there is no \noverlapping in the phases. The Waterfall model is the earliest SDLC approach that was \nused for software development. The waterfall Model illustrates the software \ndevelopment process in a linear sequential fl ow. This means that any phase in the \ndevelopment process begins only if the previous phase is complete. In this waterfall  4  \n\nFigure 1 Waterfall Model  \nmodel, the phases do not overlap.  \nThe sequential phases in Waterfall model are as follows:   \n\uf0b7 Requirement Gathering and analysis: All possible requirements of the \nsystem to be developed are captured in this phase and documented in a \nrequirement specification document.   \n\n\uf0b7 System Design: The requirement specifications from first phase are studied in \nthis phase and the system design is prepared. This system design helps in \nspecifying hardware and system requirements and helps in defining the overall \nsystem architecture.   \n\n\uf0b7 Implementation: I nputs from the system design, the system is first developed  \nin small programs called units, which are integrated in the next phase. Each unit \nis developed and tested for its functionality, which is referred to as Unit Testing.   \n\n5  \n\n\uf0b7 Integration and Testing: All the units developed in the implementation phase \nare integrated into a system after testing of each unit. Post integration the entire \nsystem is tested for any faults and failures.   \n\uf0b7 Deployment of system: Once the functional and non-functional testing is done; \nthe users   is deployed in the user   environment or released into the market.   \n\uf0b7 Maintenance: There are some issues which come up in the client environment. \nTo fix those issues, patches are released. Also, to enhance the users   some better \nversions are released. Maintenance is done to deliver these changes i n the user   \nenvironment.   \n1.6 Report Organization   \nThis is the report organization for the house rental system, which also includes \ncharts/diagrams to illustrate the system architecture and design. Furthermore, it \ncontains information regarding the tools and technologies used to build the system.   \n\nTable 1 Outline of the Report  \nIntroduction   Introduction    \nProblem Statement     \nObjective    \nScope and Limitations   \nDevelopment Methodology   \nReport Organization   \nBackground Study    Background Study   \nLiterature Review    \n\nSystem Analysis and Design    \nSystem Analysis   \nFeasibility Analysis   \nSystem Design   6  \n\nImplementation and Testing    Tools and Technology    \nTest Cases   \nConclusion and Recommendations    Lessons Learnt   \nConclusion   \nFuture Recommendations   \n\n7  \n\nChapter 2: Background Study and Literature Review  \n2.1 Background Study  \nThe background study conducted for the \"Nepagram \" social media web app project \nunderscores the need for a culturally tailored platform that connects the Nepalese \ncommunity and enthusiasts. By analyzing market trends, understanding user behaviors, \nand considering ethical and cultural dimensions, \"Nepagra m\" has been crafted to \naddress these needs and offer a unique social media experience.   \nThe proliferation of social media platforms has brought attention to issues related to \ncontent moderation, user privacy, and algorithmic bias. The development of \n\"Nepagram\" has taken these concerns into profile. Robust content moderation tools, \ntransparent privacy settings, and responsibl e algorithmic design have i ntegrated to \nensure a safe and ethical environment for users.  \n2.2 Literature Review  \nThe Django Project do cumentation serves as a comprehensive and authoritative \nresource for developers working with the Django web framework. Django is an open -\nsource, high-level Python web framework designed to encourage rapid development \nand clean, pragmatic design. The docume ntation covers all aspects of Django, from \nsetting up the environment to advanced topics such as database interaction, \nauthentication, security, and deployment. It offers extensive API references, tutorials, \nand guides for both beginner and experienced developers. \nEltantawy and Wiest\u2019s 2011 article, Social Media in the Egyptian Revolution: \nReconsidering Resource Mobilization Theory  explores the role of social media in the \nEgyptian Revolution of 2011, a critical event in the Arab Spring. The authors challenge \ntraditional resource mobilization theory by arguing that social media platforms like \nFacebook and Twitter played a transformat ive role in mobilizing protesters, \ndisseminating information, and shaping the political narrative..   8  \n\nChapter 3: System Analysis and Design  \n3.1 System Analysis  \nThe system analysis of the system is done by conducting requirement \nanalysis, feasibility analysis, object modeling, dynamic modeling and \nprocess modeling as follows:   \n3.1.1 Requirement Analysis  \nThe requirement analysis is broken down into two parts, namely \nfunctional requirements, and non-functional requirements. Both of \nthese are discussed below:  \n 3.1.1.1 Functional Requirement  \n\nFigure 2 Use case diagram  \n\n9  \n\nTable 2 UC-001 Login  \nUse Case ID   UC-001   \nUse Case   \nName   \nLogin   \nActors   User, Admin   \nBrief   \nDescription   \nThis use case describes how a user logs into the NEPAGRAM. The actors \nstarting this use case are User and Admin. The system asks user to input \nusername and password. If the system approves the login, the users are \nallowed to perform required actions.   \nTriggers   The user   wants to login in the system from one of his/her profile.   \nPreconditions   The system is operational.   \nThe user has a profile in the system.   \nThe user is trying to log in with their valid username and password.   \nThe user is not already logged in into the system.   \nNormal Flow   1. The use case begins when the user   accesses the system.   \n2. The system prompts the user for their profile credentials.   \n3. The user enters their username and password.   \n4. The system verifies the user credentials and grants the entry to the \nsystem.   \n5. The user gains access to the systems functionality.   \n6. Use case ends successfully.   \nAlternate   \nFlows   \n 4A1. Invalid username or password.   \n 4A2. User   is request to re -enter the username and password.   \nKey Scenarios   A. Success Scenarios   \n1. Valid username and password   \n2. Access to the system   \nB. Failure Scenarios   \n1. Fail due to authentication failure   \n2. Fail due to invalid username and password   10  \n\n  3. Fail due to inadequate critical resources   \n4. Fail due to non-responding system   \nPost conditions   A. Successful Completions   \n1. The user has logged into the system successfully.   \n2. The user accesses the system functionality.   \nB. Failure Conditions   \n1. The user has not been logged into the system.   \nSpecial   \nRequirement   \n1. The user shall be a registered user to get log into the system.   \n2. The system shall keep the track of the users who accessed the \nsystem.   \n\nTable 3 UC-002 Make Profile  \nUse Case ID   UC-002   \nUse Case   \nName   \nMake Profile    \nActors   User  \nBrief   \nDescription   \nAllows any registered user to make Profile for following    users   of the \nchoice. If the user is not registered then at  first user should register then \nthey can follow. The user   should provide all the profile related \ninformation. User can make Profiles   only after providing valid profile \ndetails.   \nTriggers   The user   wants to make the posts and follow other from one  of his/her \nprofile.   \nPreconditions   The system is operational.   \nThe user has registered and logged into the system.   \nThe user has valid profile details.    \n11  \n\nNormal Flow   1. The use case begins when the user enters into the system to make \nprofiles.   \n2. The system provides login option to user.   \n3. A user enters his/her username and password.   \n4. The system verifies the user\u2019s entered username and password against \nthe registered information.   \n5. User enters the profile details.   \n6. User makes profile.   \n7. The use case ends successfully.   \nAlternate   \nFlows   \n4A1. Invalid username or password.   \n4A2. User is request to re -enter the username and password.   \n7A1. User enters invalid Profile details.   \nKey   \nScenarios   \nA. Success Scenarios   \n1. The profile is made.   \n2. User views profile success information.   \nB. Failure Scenarios   \n1. Fail due to authentication failure   \n2. Fail due to invalid username and password   \n3. Fail due to inadequate critical resources   \n4. Fail due to non-responding system   \n5. Fail due to insufficient details   \n\nPost conditions  A. Successful Completions   \n1. Enters into the system.   \n2. The user makes the profile successfully.   \n3. The user receives the profile confirmation.   \nB. Failure Conditions   \n1. The Profile detail entered by the user   is invalid.   \n2. The Profile system might not be working at that moment.   12  \n\n3.1.1.2 Non-Functional Requirements   \nThe non-functional requirements of NEPAGRAM are as follows:   \nPerformance Requirement:   \ni. The user shall be able to login into the system.   \nUsability Requirement:   \ni. The user shall be able to use the system in easy manner.   \nAvailability Requirement:   \ni. The system is available 100% for the user and is used 24hrs a day and 365 \ndays a year.   \nii. The system shall be operational 24hrs a day and 7 days a week.   \nEnvironmental Requirement:   \ni. The system shall have web browser to run successfully.   \nCompatibility Requirement:   \ni. The system shall be compatible across all platforms under required \nenvironment.   \n\nSecurity Requirement:   \ni.  The user password shall be in encrypted format in the database.   \n\n13  \n\n3.1.2 Feasibility Analysis  \nFeasibility study includes consideration of all the possible ways to provide a solution \nto the given problem. The proposed solution should satisfy all the user requirements \nand should be flexible enough so that future changes can be easily done based on the \nfuture upcoming requirements.   \n3.1.2.1 Technical Feasibility    \nThe technical feasibility of \"Nepagram\" is rooted in the selection of the Django \nframework, which aligns with the project's requirements. The development team \npossesses the necessary skills  to effectively utilize Django, ensuring the creation of a \nrobust and scalable platform. Furthermore, the integration of modern frontend \ntechnologies guarantees a responsive and user-friendly interface across devices.  \n3.1.2.2 Operational Feasibility   \nOperational feasibility is demonstrated by the alignment of \"Nepagram\" with the target \naudience's preferences and behaviors. Extensive user surveys and analysis have \nindicated a demand for a culturally tailored platform like \"Nepagram.\" The inclusion \nof community-based interactions, real -time engagement tools, and personalized content \nrecommendations enhances the platform's operational viability  \n3.1.2.2 Economic Feasibility   \nEconomic feasibility is evidenced by a cost -benefit analysis of the project. Whil e \ndevelopment and maintenance costs are necessary, the potential for user engagement \nand growth within the Nepalese community offers significant revenue opportunities \nthrough targeted advertising, premium features, and potential partnerships. The \nanticipated return on investment justifies the economic feasibility of \"Nepagram.  \n3.1.2.3 Legal Feasibility  \nLegal and ethical considerations have been integrated into the project's design. Content \nmoderation tools, transparent privacy settings, and responsible algorithmic design \nensure compliance with relevant regulations and ethical standards. This approach 14  \n\nenhances the platform's credibility and user trust, demonstrating its legal and ethical \nfeasibility  \n3.1.2.4 Schedule Feasibility  \nSchedule feasibility is the degree to which a deadline for a strategy, plan, project \nor process is realistic and achievable. The feasibility of this project is high as the \nsystem can be completed within the time limit.    \n\nThe above Gantt chart shows the schedule for the project. We can see that the first \n18days were dedicated to requirement collection. The completion of requirement \ncollection allowed the project to move to System Design which then took 15days. \nThen the project moved on to Coding. We coded for 23days and then started the \nimplementation which took 15days. Then the project moved to testing phase which \ntook 12days then finally we documented the project for 10 days.    \n\n15  \n\n3.1.3 Class Diagram  \nThe class diagram for NEPAGRAM is shown as follows:   \n\nFigure 3 Class diagram  \n\n16  \n\n3.1.4 Sequence Diagram  \n\nFigure 4 Sequence diagram  \n\n17  \n\n3.1.5 Activity Diagram  \n\nFigure 5 Activity diagram  \n\n18  \n\n3.2.1 Interface design  \nThe interface design for all the major pages of NEPAGRAM is shown as follows: \n3.2.3.1 Home page UI  \n\nFigure 6 Homepage UI  \n3.2.3.2 Login page UI  \n\n  Figure 7 Login page UI  \n\n19  \n\n3.2.3.2 User profile page UI  \n\n3.2.2 Algorithm details  \nThe detail information about the algorithms that has been used in this system are as \nfollow:   \n\u2022 Image Processing Algorithm: Process images and changes them as the user \nlikes to filter with saturation, contrasts, highlighting, sharpening images and \nmore using open CV. \nCartoonize: \n\n20  \n\nGreyScale: \n\nSaturation: \n\nSharpness: \n\n\uf0b7 SVD Algorithm : \nSingular Value Decomposition (SVD)  is a powerful matrix factorization \ntechnique used in various applications, including dimensionality reduction, \nrecommendation systems, image compression, and more. In essence, SVD \ndecomposes a matrix into three other matrices that capture the underlying \nstructure of the data. Here is a breakdown of the algorithm: \n\n21  \n\nGiven a matrix AAA of size m\u00d7nm \\times nm\u00d7n, the SVD decomposition expresses \nAAA as: \nA=U\u03a3VTA = U \\Sigma V^TA=U\u03a3VT \nWhere: \n\uf0b7 UUU is an m\u00d7mm \\times mm\u00d7m orthogonal matrix, whose columns are the \nleft singular vectors. \n\uf0b7 \u03a3\\Sigma\u03a3 is an m\u00d7nm \\times nm\u00d7n diagonal matrix, with non -negative \nsingular values on the diagonal, sorted in descending order. \n\uf0b7 VVV is an n\u00d7nn \\times nn\u00d7n orthogonal matrix, whose columns are the \nright singular vectors. \n\nApplications of SVD \nHere are some common applications of SVD: \n3.1 Dimensionality Reduction \nThe SVD can be used to reduce the dimensionality of data while preserving as much \ninformation as possible. By selecting the top kkk singular values and corresponding vectors, \nwe obtain a reduced rank approximation of the matrix AAA. \n3.2 Recommender Systems \nIn recommendation systems, SVD is used for matrix factorization to identify latent factors \nthat explain user -item interactions. The matrix AAA represents the user -item interaction \nmatrix, and SVD helps to reduce the noise and find patterns in the data. \n3.3 Image Compression \nImages can be represented as matrices of pixel intensities. SVD can compress images by \napproximating the original matrix with fewer singular values, reducing the  image size \nwithout significantly compromising quality. \n\n 22  \n\nChapter 4: Implementation and Testing  \n 4.1 Implementation   \nThe tools and techniques used to implement the system and the implementation details \nof various modules NEPAGRAM are as follows:   \n4.1.1 Tools Used   \nThe tools used for the implementation of NEPAGRAM are listed below:   \nDraw.io   \nIt was used for designing the system designs such as system flowchart, ER diagram, \nrelational model, architectural design, use case diagram etc.   \nBalsamiq   \nIt was used for designing the user interface of the system.   \nHTML, CSS and JavaScript was used for the front-end development. HTML was used \nfor the webpage elements. CSS was used for providing own styling to the components. \nJavaScript was used for client-side validations and adding dynamic components to the \nwebsite.  \nTailwind \nTailwind was used for adding responsive components in our system as well as other \ntailwind components were used such as buttons, cards, navbar etc.  \nDjango   \nDjango is a high-level Python web framework that enables rapid development of secure \nand maintainable websites.   \nSQLite   \nSQLite is an in -process library that implements a self -contained, serverless, zero \nconfiguration, and transactional SQL database engi ne. The code for SQLite is in the \npublic domain and is thus free for use for any purpose, commercial or private.   \nVisual Studio Code   \nThe codes of the system were written using VS Code.    \n23  \n\n4.2 Testing   \nThe testing of NEPAGRAM is done by testing the unit modules like login module and \nsign-up module.     \n4.2.1 Test Cases for Unit Testing   \nThe test cases for the login module and sign-up module are as follows:     \nTable 4 Test Case for Login  \n  Project Name: NEPAGRAM     \nTest Case    \nTest Case ID: TC_001   Test Designed by: Babim  \nKhanal  \nTest Priority (Low/Medium/High): Medium    Test Designed date: 2024 -07- \n28   \nModule Name: Login Screen    Test Executed by: Babim \nKhanal  \nTest Title:  Verify login with valid username and \npassword   \nTest Execution date: 2024 - \n07-28  \n  Description:  Test the login page   \n  Pre-conditions:  User has valid username and password   \n  Dependencies:    \nStep   Test Steps   Test Data   Expected   \nResult   \nActual  \nResult   \nStatus (Pass/Fail)   Notes  \n1   Navigate to \nlogin page   \n   Login page \nshould open  \nAs  \n Expected   \ni.e.   \nUser is \nnavigated to  \nLogin page \nof system   \nPass      24  \n\n2   Provide \nvalid \nusername   \nUser Name  \n=  bobby   \nCredential \ncan be \nentered   \nAs  \nExpected,   \nPass      \n3   Provide \nvalid \npassword   \nPassword = \nbobby   \n Credential \ncan be \nentered   \nAs  \nExpected,   \nPass      \n4   Click on  \nLOGIN \nbutton   \n   User should \nbe able to  \nlogin to an \napplication  \nAs  \nExpected   \n   i.e.   \n\n User is \nable to log \nin to the \nsystem   \nPass      \nPost-conditions:   \nUser is validated with database and successfully login to NEPAGRAM.   \nThe profile session details are logged in to the database.   \n\n25  \n\nTable 5 Test Case for Sign up  \n  Project Name: NEPAGRAM    \nTest Case    \nTest Case ID: TC_002   Test Designed by: Babim  \nKhanal  \nTest Priority (Low/Medium/High): Medium    Test Designed date: 2024 - \n07-28   \nModule Name: Sign Up Screen    Test Executed by: Babim  \nKhanal  \nTest Title:  Register new user   into the system    Test Execution date: 2024- \n07-28  \n  Description:  Test the HRS sign up page.    \n  Pre-conditions:  User has all the necessary details.   \n  Dependencies:    \nStep   Test Steps   Test Data   Expected   \nResult   \nActual   \nResult   \nStatus \n(Pass/Fail) \nNotes  \n\n1   Navigate to sign up \npage   \n   Sign up page \nshould open   \nAs Expected   \ni.e.   \n User is \nnavigated to   \nSign Up page of \nsystem   \nPass      \n2   Provide all required \ninformation   \nUser Name = \nbobby  \nPassword =  \nbobby  \nEmail= \nbobby@gmai  \nl.com   \nFirst Name =  \nBobby  \n\nCredential \ncan be \nentered  \nAs Expected,  \n\nPass      26  \n\n  Last Name = \nKhanal  \n\n3   Click on  \nSIGNUP button   \n   User should \nbe able to   \nsign up to the \nsystem   \nAs Expected   \ni.e.   \nUser is able to \nregistered to the \nsystem   \n   Pass      \nPost-conditions:   \nUser credentials are validated and successfully registered to NEPAGRAM.   \n\n27  \n\nChapter 5: Conclusion and Future Recommendations  \n5.1 Conclusion  \nThe development journey of the \"Nepagram \" social media web app has been an \nexploration of cultural affinity, user engagement, and technological innovation. \nThrough thorough research, strategic planning, and collaborative effort, we have \nconceptualized and created a platform that seeks to bridge gaps within the Nepalese \ncommunity and provide a unique online space for sharing, connecting, and interacting.  \nThe platform's architecture and design have been carefully crafted to encompass the \nessence of community, personalization, and real -time engagement. By utilizing the \nDjango framework and modern frontend technologies, we have constructed a \nfoundation that is both robust and user -friendly, facilitating seamless interactions and \ndynamic content sharing.  \n5.2 Lesson Learnt/Outcome  \nThroughout the deve lopment of \"Nepagram,\" we learned the significance of ongoing \nuser engagement. Regular feedback loops, user testing, and surveys allowed us to \nunderstand user preferences and incorporate necessary adjustments. This approach \nresulted in features that truly resonate with the target audience, enhancing the overall \nuser experience. Our commitment to user privacy and data security was a key outcome. \nWe learned that embedding robust security measures from the outset is crucial. By \nprioritizing features such as tr ansparent privacy settings, secure authentication, and \ncontent moderation tools, we established a foundation of trust and integrity. Working \nwith the Django framework and modern frontend technologies underscored the \npracticality of utilizing established fr ameworks. These tools provided a solid \nfoundation, allowing us to focus more on innovative features and user experience while \nbenefiting from the frameworks' security and scalability.  \n\n  28  \n\n5.3 Future Recommendation  \nThe development of \"Nepagram\" has provided valuable insights into its potential for \ngrowth and enhancement. As we move forward, we offer the following \nrecommendations to further enrich the platform and its impact:  \n- Enhanced User Engagement Features: Continued innovation in user \nengagement features, such as gamification elements, interactive polls, and \ncollaborative projects, can further elevate user participation and interaction \nwithin the platform  \n\n- Localization and Multilingual Support: To expand its global reach, \nimplementing loca lization features and providing multilingual support can \ncreate an inclusive environment for users from diverse linguistic backgrounds.  \n\n- Augmented Reality (AR) Integration: The integration of augmented reality \nfeatures can offer unique and immersive expe riences for users, enabling them \nto interact with content in novel ways and fostering creativity.   \n\n- Offline and Low -Bandwidth Mode: Introducing an offline mode or a \nlowbandwidth mode can cater to users in areas with limited internet \nconnectivity, allowing them to engage with the platform even under challenging \nnetwork conditions  \n\n29  \n\nReference  \n\n[1] \u201cDjango,\u201d Django Project, https://docs.djangoproject.com/en/4.2/ (accessed Jan. \n20, 2023).   \n[2] \u201cPython 3.11.4 documentation,\u201d 3.11.4 Documentation, https://docs.python.org/3/ \n(accessed Jan. 29, 2023).   \n[3] Eltantawy, N & Wiest, JB 2011, \u2018Social Media in the Egyptian Revolution: \nReconsidering Resource Mobilization Theory\u2019, International Journal of \nCommunication 5, pp. 1207-1224.  \n\nAppendices  \n\nLogin & Signup:  \n\nGoogle AUTH:  \n\nFeed: \n\nUser Profile:  \n\nShare Post: \n\nMarketplace:", "Experience": "s, engage with content, and \nparticipate in vibrant online communities.   \nNepagram offers a seamless onboarding experience with user registration, profile \ncreation, and secure authentication. Users can customize their profiles by adding profile \npictures, bios, and other personal details.  \nThe application includes a sophisticated content feed that employs an algorithmic \napproach to display relevant posts to users. Users can create posts enriched with text, \nimages, and videos, and can interact with posts through likes, comments, and shares.  \nNepagram enables users to create and join various interest -based communities, \nreflecting diverse aspects of culture, such as art, food, travel, and more. Community \nmembers can engage in discussions, share experiences, and contribute to the growth of \nthe community.  \n\n v  \n\nACKNOWLEGEMENT  \nWe would like to express our sincere gratitude to all individuals who contributed to the \ndevelopment and realization of the \"Nepagram \" social media web app. Their \ndedication, insights, and support have played an instrumental role in shaping this \nplatform into what it is today. Our gratitude extends to our mentors and advisors who \nprovided guidance and constructive feedback throughout the development lifecycle.  \nTheir insights have enriched the project and guided us in making informed decisions.  \nThe inspiration behind \"Nepagram\" stems from the vibrant Nepalese culture and its \ndiverse community. We acknowledge and celebrate the culture th at guided us in \ncreating a platform that resonates with shared interests and experiences.  \n\nTable of Content  \nSUPERVISOR\u2019S RECOMMENDATION ................................ ................................ ...........  ii \nLETTER OF APPROVAL  ................................ ................................ ................................  iii \nABSTRACT ................................ ................................ ................................ ....................  iv \nACKNOWLEGEMENT ................................ ................................ ................................ ....v \nList of Table ................................ ................................ ................................ ..................... 8 \nList of Figures ................................ ................................ ................................ ................... 9 \nList of Abbreviations  ................................ ................................ ................................ .......  10 \nChapter 1: Introduction ................................ ................................ ................................ ...1 \n1.1 Introduction ................................ ................................ ................................ ............. 1 \n1.2 Problem Statement  ................................ ................................ ................................ ...2 \n1.3 Objectives................................ ................................ ................................ ................ 2 \n1.4 Limitations of existing system  ................................ ................................ ................... 3 \n1.5 Development Methodology  ................................ ................................ ....................... 3 \n1.6 Report Organization  ................................ ................................ ................................ ..... 5 \nChapter 2:Background Study and Literature Review ................................ ...................... 7 \n2.1 Background Study  ................................ ................................ ................................ ....7 \n2.2 Literature Review  ................................ ................................ ................................ ..... 7 \nChapter 3: System Analysis and Design  ................................ ................................ ........... 8 \n3.1 System Analysis ................................ ................................ ................................ ....... 8 \n3.1.1 Requirement Analysis  ................................ ................................ ............................ 8 \n3.1.1.1 Functional Requirement  ................................ ................................ .................. 8 \n3.1.1.2 Non-Functional Requirements ................................ ................................ ........  12 \n3.1.2 Feasibility Analysis  ................................ ................................ .............................  13 \n3.1.2.1 Technical Feasibility  ................................ ................................ .....................  13 \n3.1.2.2 Operational Feasibility  ................................ ................................ ..................  13 \n3.1.2.2 Economic Feasibility  ................................ ................................ .....................  13 \n3.1.2.3 Legal Feasibility  ................................ ................................ ...........................  13 \n3.1.3 Class Diagram  ................................ ................................ ................................ . 15 \n3.1.4 Sequence Diagram  ................................ ................................ ...........................  16  \n3.1.5 Activity Diagram  ................................ ................................ .............................  17 \n3.2.1 Interface design  ................................ ................................ ...............................  18 \n3.2.2 Algorithm detai ls ................................ ................................ .............................  19 \nChapter 4: Implementation and Testing  ................................ ................................ ........  22 \n4.1 Implementation  ................................ ................................ ................................ ......  22 \n4.1.1 Tools Used ................................ ................................ ................................ ......  22 \n4.2 Testing ................................ ................................ ................................ ..................  23 \n4.2.1 Test Cases for Unit Testing  ................................ ................................ ..............  23 \nChapter 5: Conclusion and Future Recommendations ................................ ...................  27 \n5.1 Conclusion................................ ................................ ................................ .............  27 \n5.2 Lesson Learnt/Outcome  ................................ ................................ ..........................  27 \n5.3 Future Recommendation  ................................ ................................ .........................  28 \n\nList of Table  \nTable 1 Outline of the Report ........................................................................................ 5  \nTable 2 UC-001 Login ................................................................................................... 9  \nTable 3 UC-002 Make Posts ........................................................................................ 10  \nTable 4 Test Case for Login......................................................................................... 21  \nTable 5 Test Case For Sign up ..................................................................................... 23  \n\nList of Figures  \nFigure 1 Waterfall Model............................................................................................... 4  \nFigure 2 Use case diagram ............................................................................................. 8  \nFigure 3 Class diagram ................................................................................................ 15  \nFigure 4 Sequence diagram .......................................................................................... 16  \nFigure 5 Activity diagram............................................................................................ 17  \nFigure 6 Homepage UI ................................................................................................. 18  \nFigure 7 Login page UI ................................................................................................ 18  \n\nList of Abbreviations  \nDOM \u2013 Domain Object Model   \nUC \u2013 Use Case   \nUI \u2013 User Interface   \nVS \u2013 Visual Studio  \nCSS \u2013 Cascading style sheet  \nHTML \u2013 Hyper Text Markup Language  \nSQL \u2013 Structured Query Language  \n\n1  \n\nChapter 1: Introduction  \n1.1 Introduction  \nNepagram is upgraded and offers a seamless onboarding experience with user \nregistration, profile creation, and secure authentication. Users can customize their \nprofiles by adding profile pictures, bios, and other personal details. Built on the Django \nframework, Nepagram provides a user -friendly platform where individuals can share \ntheir experiences, engage with content, and participate in vibrant online communities.  \nTechnology Stack:  \nFrontend: The frontend is d eveloped using HTML, Tailwind CSS, and JavaScript. \nTailwind CSS's utility -first approach facilitates rapid development, resulting in a \nresponsive and visually appealing user interface.  \nBackend: Django, a powerful Python web framework, forms the core of ou r \napplication's backend. Django enables seamless data handling, efficient business logic, \nand scalable architecture.  \n- Django Rest Framework: An extension of Django that simplifies building \nRESTful APIs for the frontend to interact with the backend.  \n- Python: The primary programming language for backend development, \nintegrated with Django.  \nDatabase:  \nPostgreSQL: An open -source relational database management system known for its \nperformance, reliability, and support for complex data relationships.  \nAuthentication and Security:  \nOAUTH2.0: For secure user authentication and authorization, allowing users to log in \nusing their existing social media accounts.  \n\n 2  \n\n1.2 Problem Statement   \nIn Nepal, many individuals struggle to find affordable home goods and electronics, such \nas laptops, due to the high cost of living and low income. This economic challenge \nhinders access to new items, and the absence of reliable platforms for selling used goods \ncontributes to significant waste as people often discard their el ectronics instead of \nselling or recycling them.  \nBoth buyers and sellers face obstacles in acquiring or selling used electronics, requiring \na simple and trustworthy solution. There is a pressing need for a platform that can \nfacilitate secure and effective connections between buyers and sellers of pre -owned \nelectronics, promoting sustainable shopping habits and reducing electronic waste.   \n1.3 Objectives  \n1. Facilitate Affordable Access: The primary objective of the NEPAGRAM Web \nApplication is to provide a plat form where individuals in Nepal can access \naffordable home goods and electronics, such as laptops. By offering pre-owned \nitems at reasonable prices, the platform aims to address the economic challenges \nfaced by many users and improve their access to essential items.  \n2. Promote Responsible Consumption : The NEPAGRAM Web Application \nseeks to foster responsible shopping habits among users. By providing a \nconvenient and reliable platform for buying and selling used goods, the \napplication encourages users to consider sustainable options before following    \nnew items, thereby reducing overall consumption and its environmental impact.  \n3. Create a Trusted Marketplace: Building trust and reliability is a key objective \nof the platform. By implementing robust security measures, authenticating \nusers, and facilitating transparent communication between buyers and sellers, \nwe aim to establish a trustworthy environment for all transactions. This fosters \nconfidence in the platform and promotes healthy and ethical interactions.  \n4. Enhance User Experience:  The application aims  to deliver a seamless and \nuser-friendly experience for both buyers and sellers. By utilizing advanced \ntechnologies, such as image -based recommendation powered by machine \nlearning, we strive to offer personalized and accurate item suggestions, ensuring \nan enjoyable shopping journey for users.   \n3  \n\n5. Support Local Economy: Another objective is to support the local economy \nby following   buyers with sellers within Nepal. By encouraging the exchange \nof used goods within the country, the platform contributes to the growth of local \nbusinesses and promotes a sense of community among users.  \n6. Empower Sellers: The application seeks to empower sellers by providing them \nwith a hassle-free platform to reach potential buyers and earn income from their \npre-owned electronics. By  offering a straightforward listing process and \nefficient communication tools, we aim to facilitate successful transactions and \nempower sellers in their online ventures.  \n1.4 Limitations of existing system  \n1. Limited Traffic: The platform's current focus on multi users but there can \nbe traffic incidents if large number of traffic is using the web app. \n2. Limited Return Policy:  The platforms have strict or no return policies, \nwhich means buyers must be cautious and confident in their purchases, as \nreturns or exchanges may not be feasible.  \n3. Quality of Medias: Since users are optimize media quality are also used to \noptimize the web runtime so, it could result the loss of quality in medias. \n4. Communication Challenges:  The platform does not  have messaging \nsystem, which may lead to potential delays in communication between users \n5. Limited Profile Options:  Our Thrift primarily facilitates direct contact \nbetween buyers and sellers, which might limit the availability of secure and \ndiverse Profile options.  \n1.5 Development Meth odology   \n Waterfall model is used for the development of this system and also referred as a linear \nsequential life cycle model. It is very simple to understand and use. In a waterfall model, \neach phase must be completed before the next phase can begin and there is no \noverlapping in the phases. The Waterfall model is the earliest SDLC approach that was \nused for software development. The waterfall Model illustrates the software \ndevelopment process in a linear sequential fl ow. This means that any phase in the \ndevelopment process begins only if the previous phase is complete. In this waterfall  4  \n\nFigure 1 Waterfall Model  \nmodel, the phases do not overlap.  \nThe sequential phases in Waterfall model are as follows:   \n\uf0b7 Requirement Gathering and analysis: All possible requirements of the \nsystem to be developed are captured in this phase and documented in a \nrequirement specification document.   \n\n\uf0b7 System Design: The requirement specifications from first phase are studied in \nthis phase and the system design is prepared. This system design helps in \nspecifying hardware and system requirements and helps in defining the overall \nsystem architecture.   \n\n\uf0b7 Implementation: I nputs from the system design, the system is first developed  \nin small programs called units, which are integrated in the next phase. Each unit \nis developed and tested for its functionality, which is referred to as Unit Testing.   \n\n5  \n\n\uf0b7 Integration and Testing: All the units developed in the implementation phase \nare integrated into a system after testing of each unit. Post integration the entire \nsystem is tested for any faults and failures.   \n\uf0b7 Deployment of system: Once the functional and non-functional testing is done; \nthe users   is deployed in the user   environment or released into the market.   \n\uf0b7 Maintenance: There are some issues which come up in the client environment. \nTo fix those issues, patches are released. Also, to enhance the users   some better \nversions are released. Maintenance is done to deliver these changes i n the user   \nenvironment.   \n1.6 Report Organization   \nThis is the report organization for the house rental system, which also includes \ncharts/diagrams to illustrate the system architecture and design. Furthermore, it \ncontains information regarding the tools and technologies used to build the system.   \n\nTable 1 Outline of the Report  \nIntroduction   Introduction    \nProblem Statement     \nObjective    \nScope and Limitations   \nDevelopment Methodology   \nReport Organization   \nBackground Study    Background Study   \nLiterature Review    \n\nSystem Analysis and Design    \nSystem Analysis   \nFeasibility Analysis   \nSystem Design   6  \n\nImplementation and Testing    Tools and Technology    \nTest Cases   \nConclusion and Recommendations    Lessons Learnt   \nConclusion   \nFuture Recommendations   \n\n7  \n\nChapter 2: Background Study and Literature Review  \n2.1 Background Study  \nThe background study conducted for the \"Nepagram \" social media web app project \nunderscores the need for a culturally tailored platform that connects the Nepalese \ncommunity and enthusiasts. By analyzing market trends, understanding user behaviors, \nand considering ethical and cultural dimensions, \"Nepagra m\" has been crafted to \naddress these needs and offer a unique social media experience.   \nThe proliferation of social media platforms has brought attention to issues related to \ncontent moderation, user privacy, and algorithmic bias. The development of \n\"Nepagram\" has taken these concerns into profile. Robust content moderation tools, \ntransparent privacy settings, and responsibl e algorithmic design have i ntegrated to \nensure a safe and ethical environment for users.  \n2.2 Literature Review  \nThe Django Project do cumentation serves as a comprehensive and authoritative \nresource for developers working with the Django web framework. Django is an open -\nsource, high-level Python web framework designed to encourage rapid development \nand clean, pragmatic design. The docume ntation covers all aspects of Django, from \nsetting up the environment to advanced topics such as database interaction, \nauthentication, security, and deployment. It offers extensive API references, tutorials, \nand guides for both beginner and experienced developers. \nEltantawy and Wiest\u2019s 2011 article, Social Media in the Egyptian Revolution: \nReconsidering Resource Mobilization Theory  explores the role of social media in the \nEgyptian Revolution of 2011, a critical event in the Arab Spring. The authors challenge \ntraditional resource mobilization theory by arguing that social media platforms like \nFacebook and Twitter played a transformat ive role in mobilizing protesters, \ndisseminating information, and shaping the political narrative..   8  \n\nChapter 3: System Analysis and Design  \n3.1 System Analysis  \nThe system analysis of the system is done by conducting requirement \nanalysis, feasibility analysis, object modeling, dynamic modeling and \nprocess modeling as follows:   \n3.1.1 Requirement Analysis  \nThe requirement analysis is broken down into two parts, namely \nfunctional requirements, and non-functional requirements. Both of \nthese are discussed below:  \n 3.1.1.1 Functional Requirement  \n\nFigure 2 Use case diagram  \n\n9  \n\nTable 2 UC-001 Login  \nUse Case ID   UC-001   \nUse Case   \nName   \nLogin   \nActors   User, Admin   \nBrief   \nDescription   \nThis use case describes how a user logs into the NEPAGRAM. The actors \nstarting this use case are User and Admin. The system asks user to input \nusername and password. If the system approves the login, the users are \nallowed to perform required actions.   \nTriggers   The user   wants to login in the system from one of his/her profile.   \nPreconditions   The system is operational.   \nThe user has a profile in the system.   \nThe user is trying to log in with their valid username and password.   \nThe user is not already logged in into the system.   \nNormal Flow   1. The use case begins when the user   accesses the system.   \n2. The system prompts the user for their profile credentials.   \n3. The user enters their username and password.   \n4. The system verifies the user credentials and grants the entry to the \nsystem.   \n5. The user gains access to the systems functionality.   \n6. Use case ends successfully.   \nAlternate   \nFlows   \n 4A1. Invalid username or password.   \n 4A2. User   is request to re -enter the username and password.   \nKey Scenarios   A. Success Scenarios   \n1. Valid username and password   \n2. Access to the system   \nB. Failure Scenarios   \n1. Fail due to authentication failure   \n2. Fail due to invalid username and password   10  \n\n  3. Fail due to inadequate critical resources   \n4. Fail due to non-responding system   \nPost conditions   A. Successful Completions   \n1. The user has logged into the system successfully.   \n2. The user accesses the system functionality.   \nB. Failure Conditions   \n1. The user has not been logged into the system.   \nSpecial   \nRequirement   \n1. The user shall be a registered user to get log into the system.   \n2. The system shall keep the track of the users who accessed the \nsystem.   \n\nTable 3 UC-002 Make Profile  \nUse Case ID   UC-002   \nUse Case   \nName   \nMake Profile    \nActors   User  \nBrief   \nDescription   \nAllows any registered user to make Profile for following    users   of the \nchoice. If the user is not registered then at  first user should register then \nthey can follow. The user   should provide all the profile related \ninformation. User can make Profiles   only after providing valid profile \ndetails.   \nTriggers   The user   wants to make the posts and follow other from one  of his/her \nprofile.   \nPreconditions   The system is operational.   \nThe user has registered and logged into the system.   \nThe user has valid profile details.    \n11  \n\nNormal Flow   1. The use case begins when the user enters into the system to make \nprofiles.   \n2. The system provides login option to user.   \n3. A user enters his/her username and password.   \n4. The system verifies the user\u2019s entered username and password against \nthe registered information.   \n5. User enters the profile details.   \n6. User makes profile.   \n7. The use case ends successfully.   \nAlternate   \nFlows   \n4A1. Invalid username or password.   \n4A2. User is request to re -enter the username and password.   \n7A1. User enters invalid Profile details.   \nKey   \nScenarios   \nA. Success Scenarios   \n1. The profile is made.   \n2. User views profile success information.   \nB. Failure Scenarios   \n1. Fail due to authentication failure   \n2. Fail due to invalid username and password   \n3. Fail due to inadequate critical resources   \n4. Fail due to non-responding system   \n5. Fail due to insufficient details   \n\nPost conditions  A. Successful Completions   \n1. Enters into the system.   \n2. The user makes the profile successfully.   \n3. The user receives the profile confirmation.   \nB. Failure Conditions   \n1. The Profile detail entered by the user   is invalid.   \n2. The Profile system might not be working at that moment.   12  \n\n3.1.1.2 Non-Functional Requirements   \nThe non-functional requirements of NEPAGRAM are as follows:   \nPerformance Requirement:   \ni. The user shall be able to login into the system.   \nUsability Requirement:   \ni. The user shall be able to use the system in easy manner.   \nAvailability Requirement:   \ni. The system is available 100% for the user and is used 24hrs a day and 365 \ndays a year.   \nii. The system shall be operational 24hrs a day and 7 days a week.   \nEnvironmental Requirement:   \ni. The system shall have web browser to run successfully.   \nCompatibility Requirement:   \ni. The system shall be compatible across all platforms under required \nenvironment.   \n\nSecurity Requirement:   \ni.  The user password shall be in encrypted format in the database.   \n\n13  \n\n3.1.2 Feasibility Analysis  \nFeasibility study includes consideration of all the possible ways to provide a solution \nto the given problem. The proposed solution should satisfy all the user requirements \nand should be flexible enough so that future changes can be easily done based on the \nfuture upcoming requirements.   \n3.1.2.1 Technical Feasibility    \nThe technical feasibility of \"Nepagram\" is rooted in the selection of the Django \nframework, which aligns with the project's requirements. The development team \npossesses the necessary", "Skills": "to effectively utilize Django, ensuring the creation of a \nrobust and scalable platform. Furthermore, the integration of modern frontend \ntechnologies guarantees a responsive and user-friendly interface across devices.  \n3.1.2.2 Operational Feasibility   \nOperational feasibility is demonstrated by the alignment of \"Nepagram\" with the target \naudience's preferences and behaviors. Extensive user surveys and analysis have \nindicated a demand for a culturally tailored platform like \"Nepagram.\" The inclusion \nof community-based interactions, real -time engagement tools, and personalized content \nrecommendations enhances the platform's operational viability  \n3.1.2.2 Economic Feasibility   \nEconomic feasibility is evidenced by a cost -benefit analysis of the project. Whil e \ndevelopment and maintenance costs are necessary, the potential for user engagement \nand growth within the Nepalese community offers significant revenue opportunities \nthrough targeted advertising, premium features, and potential partnerships. The \nanticipated return on investment justifies the economic feasibility of \"Nepagram.  \n3.1.2.3 Legal Feasibility  \nLegal and ethical considerations have been integrated into the project's design. Content \nmoderation tools, transparent privacy settings, and responsible algorithmic design \nensure compliance with relevant regulations and ethical standards. This approach 14  \n\nenhances the platform's credibility and user trust, demonstrating its legal and ethical \nfeasibility  \n3.1.2.4 Schedule Feasibility  \nSchedule feasibility is the degree to which a deadline for a strategy, plan, project \nor process is realistic and achievable. The feasibility of this project is high as the \nsystem can be completed within the time limit.    \n\nThe above Gantt chart shows the schedule for the project. We can see that the first \n18days were dedicated to requirement collection. The completion of requirement \ncollection allowed the project to move to System Design which then took 15days. \nThen the project moved on to Coding. We coded for 23days and then started the \nimplementation which took 15days. Then the project moved to testing phase which \ntook 12days then finally we documented the project for 10 days.    \n\n15  \n\n3.1.3 Class Diagram  \nThe class diagram for NEPAGRAM is shown as follows:   \n\nFigure 3 Class diagram  \n\n16  \n\n3.1.4 Sequence Diagram  \n\nFigure 4 Sequence diagram  \n\n17  \n\n3.1.5 Activity Diagram  \n\nFigure 5 Activity diagram  \n\n18  \n\n3.2.1 Interface design  \nThe interface design for all the major pages of NEPAGRAM is shown as follows: \n3.2.3.1 Home page UI  \n\nFigure 6 Homepage UI  \n3.2.3.2 Login page UI  \n\n  Figure 7 Login page UI  \n\n19  \n\n3.2.3.2 User profile page UI  \n\n3.2.2 Algorithm details  \nThe detail information about the algorithms that has been used in this system are as \nfollow:   \n\u2022 Image Processing Algorithm: Process images and changes them as the user \nlikes to filter with saturation, contrasts, highlighting, sharpening images and \nmore using open CV. \nCartoonize: \n\n20  \n\nGreyScale: \n\nSaturation: \n\nSharpness: \n\n\uf0b7 SVD Algorithm : \nSingular Value Decomposition (SVD)  is a powerful matrix factorization \ntechnique used in various applications, including dimensionality reduction, \nrecommendation systems, image compression, and more. In essence, SVD \ndecomposes a matrix into three other matrices that capture the underlying \nstructure of the data. Here is a breakdown of the algorithm: \n\n21  \n\nGiven a matrix AAA of size m\u00d7nm \\times nm\u00d7n, the SVD decomposition expresses \nAAA as: \nA=U\u03a3VTA = U \\Sigma V^TA=U\u03a3VT \nWhere: \n\uf0b7 UUU is an m\u00d7mm \\times mm\u00d7m orthogonal matrix, whose columns are the \nleft singular vectors. \n\uf0b7 \u03a3\\Sigma\u03a3 is an m\u00d7nm \\times nm\u00d7n diagonal matrix, with non -negative \nsingular values on the diagonal, sorted in descending order. \n\uf0b7 VVV is an n\u00d7nn \\times nn\u00d7n orthogonal matrix, whose columns are the \nright singular vectors. \n\nApplications of SVD \nHere are some common applications of SVD: \n3.1 Dimensionality Reduction \nThe SVD can be used to reduce the dimensionality of data while preserving as much \ninformation as possible. By selecting the top kkk singular values and corresponding vectors, \nwe obtain a reduced rank approximation of the matrix AAA. \n3.2 Recommender Systems \nIn recommendation systems, SVD is used for matrix factorization to identify latent factors \nthat explain user -item interactions. The matrix AAA represents the user -item interaction \nmatrix, and SVD helps to reduce the noise and find patterns in the data. \n3.3 Image Compression \nImages can be represented as matrices of pixel intensities. SVD can compress images by \napproximating the original matrix with fewer singular values, reducing the  image size \nwithout significantly compromising quality. \n\n 22  \n\nChapter 4: Implementation and Testing  \n 4.1 Implementation   \nThe tools and techniques used to implement the system and the implementation details \nof various modules NEPAGRAM are as follows:   \n4.1.1 Tools Used   \nThe tools used for the implementation of NEPAGRAM are listed below:   \nDraw.io   \nIt was used for designing the system designs such as system flowchart, ER diagram, \nrelational model, architectural design, use case diagram etc.   \nBalsamiq   \nIt was used for designing the user interface of the system.   \nHTML, CSS and JavaScript was used for the front-end development. HTML was used \nfor the webpage elements. CSS was used for providing own styling to the components. \nJavaScript was used for client-side validations and adding dynamic components to the \nwebsite.  \nTailwind \nTailwind was used for adding responsive components in our system as well as other \ntailwind components were used such as buttons, cards, navbar etc.  \nDjango   \nDjango is a high-level Python web framework that enables rapid development of secure \nand maintainable websites.   \nSQLite   \nSQLite is an in -process library that implements a self -contained, serverless, zero \nconfiguration, and transactional SQL database engi ne. The code for SQLite is in the \npublic domain and is thus free for use for any purpose, commercial or private.   \nVisual Studio Code   \nThe codes of the system were written using VS Code.    \n23  \n\n4.2 Testing   \nThe testing of NEPAGRAM is done by testing the unit modules like login module and \nsign-up module.     \n4.2.1 Test Cases for Unit Testing   \nThe test cases for the login module and sign-up module are as follows:     \nTable 4 Test Case for Login  \n  Project Name: NEPAGRAM     \nTest Case    \nTest Case ID: TC_001   Test Designed by: Babim  \nKhanal  \nTest Priority (Low/Medium/High): Medium    Test Designed date: 2024 -07- \n28   \nModule Name: Login Screen    Test Executed by: Babim \nKhanal  \nTest Title:  Verify login with valid username and \npassword   \nTest Execution date: 2024 - \n07-28  \n  Description:  Test the login page   \n  Pre-conditions:  User has valid username and password   \n  Dependencies:    \nStep   Test Steps   Test Data   Expected   \nResult   \nActual  \nResult   \nStatus (Pass/Fail)   Notes  \n1   Navigate to \nlogin page   \n   Login page \nshould open  \nAs  \n Expected   \ni.e.   \nUser is \nnavigated to  \nLogin page \nof system   \nPass      24  \n\n2   Provide \nvalid \nusername   \nUser Name  \n=  bobby   \nCredential \ncan be \nentered   \nAs  \nExpected,   \nPass      \n3   Provide \nvalid \npassword   \nPassword = \nbobby   \n Credential \ncan be \nentered   \nAs  \nExpected,   \nPass      \n4   Click on  \nLOGIN \nbutton   \n   User should \nbe able to  \nlogin to an \napplication  \nAs  \nExpected   \n   i.e.   \n\n User is \nable to log \nin to the \nsystem   \nPass      \nPost-conditions:   \nUser is validated with database and successfully login to NEPAGRAM.   \nThe profile session details are logged in to the database.   \n\n25  \n\nTable 5 Test Case for Sign up  \n  Project Name: NEPAGRAM    \nTest Case    \nTest Case ID: TC_002   Test Designed by: Babim  \nKhanal  \nTest Priority (Low/Medium/High): Medium    Test Designed date: 2024 - \n07-28   \nModule Name: Sign Up Screen    Test Executed by: Babim  \nKhanal  \nTest Title:  Register new user   into the system    Test Execution date: 2024- \n07-28  \n  Description:  Test the HRS sign up page.    \n  Pre-conditions:  User has all the necessary details.   \n  Dependencies:    \nStep   Test Steps   Test Data   Expected   \nResult   \nActual   \nResult   \nStatus \n(Pass/Fail) \nNotes  \n\n1   Navigate to sign up \npage   \n   Sign up page \nshould open   \nAs Expected   \ni.e.   \n User is \nnavigated to   \nSign Up page of \nsystem   \nPass      \n2   Provide all required \ninformation   \nUser Name = \nbobby  \nPassword =  \nbobby  \nEmail= \nbobby@gmai  \nl.com   \nFirst Name =  \nBobby  \n\nCredential \ncan be \nentered  \nAs Expected,  \n\nPass      26  \n\n  Last Name = \nKhanal  \n\n3   Click on  \nSIGNUP button   \n   User should \nbe able to   \nsign up to the \nsystem   \nAs Expected   \ni.e.   \nUser is able to \nregistered to the \nsystem   \n   Pass      \nPost-conditions:   \nUser credentials are validated and successfully registered to NEPAGRAM.   \n\n27  \n\nChapter 5: Conclusion and Future Recommendations  \n5.1 Conclusion  \nThe development journey of the \"Nepagram \" social media web app has been an \nexploration of cultural affinity, user engagement, and technological innovation. \nThrough thorough research, strategic planning, and collaborative effort, we have \nconceptualized and created a platform that seeks to bridge gaps within the Nepalese \ncommunity and provide a unique online space for sharing, connecting, and interacting.  \nThe platform's architecture and design have been carefully crafted to encompass the \nessence of community, personalization, and real -time engagement. By utilizing the \nDjango framework and modern frontend technologies, we have constructed a \nfoundation that is both robust and user -friendly, facilitating seamless interactions and \ndynamic content sharing.  \n5.2 Lesson Learnt/Outcome  \nThroughout the deve lopment of \"Nepagram,\" we learned the significance of ongoing \nuser engagement. Regular feedback loops, user testing, and surveys allowed us to \nunderstand user preferences and incorporate necessary adjustments. This approach \nresulted in features that truly resonate with the target audience, enhancing the overall \nuser experience. Our commitment to user privacy and data security was a key outcome. \nWe learned that embedding robust security measures from the outset is crucial. By \nprioritizing features such as tr ansparent privacy settings, secure authentication, and \ncontent moderation tools, we established a foundation of trust and integrity. Working \nwith the Django framework and modern frontend technologies underscored the \npracticality of utilizing established fr ameworks. These tools provided a solid \nfoundation, allowing us to focus more on innovative features and user experience while \nbenefiting from the frameworks' security and scalability.  \n\n  28  \n\n5.3 Future Recommendation  \nThe development of \"Nepagram\" has provided valuable insights into its potential for \ngrowth and enhancement. As we move forward, we offer the following \nrecommendations to further enrich the platform and its impact:  \n- Enhanced User Engagement Features: Continued innovation in user \nengagement features, such as gamification elements, interactive polls, and \ncollaborative projects, can further elevate user participation and interaction \nwithin the platform  \n\n- Localization and Multilingual Support: To expand its global reach, \nimplementing loca lization features and providing multilingual support can \ncreate an inclusive environment for users from diverse linguistic backgrounds.  \n\n- Augmented Reality (AR) Integration: The integration of augmented reality \nfeatures can offer unique and immersive expe riences for users, enabling them \nto interact with content in novel ways and fostering creativity.   \n\n- Offline and Low -Bandwidth Mode: Introducing an offline mode or a \nlowbandwidth mode can cater to users in areas with limited internet \nconnectivity, allowing them to engage with the platform even under challenging \nnetwork conditions  \n\n29  \n\nReference  \n\n[1] \u201cDjango,\u201d Django Project, https://docs.djangoproject.com/en/4.2/ (accessed Jan. \n20, 2023).   \n[2] \u201cPython 3.11.4 documentation,\u201d 3.11.4 Documentation, https://docs.python.org/3/ \n(accessed Jan. 29, 2023).   \n[3] Eltantawy, N & Wiest, JB 2011, \u2018Social Media in the Egyptian Revolution: \nReconsidering Resource Mobilization Theory\u2019, International Journal of \nCommunication 5, pp. 1207-1224.  \n\nAppendices  \n\nLogin & Signup:  \n\nGoogle AUTH:  \n\nFeed: \n\nUser Profile:  \n\nShare Post: \n\nMarketplace:"}]